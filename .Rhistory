count(winner = "n1")
mean(i)
simulation_data %>% mean(i)
mean(simulation_data$i)
mean(simulation_data$timestep)
simulation_data %>%
filter(winner = "n1") %>%
mean(simulation_data$timestep)
simulation_data %>%
filter(winner == "n1") %>%
mean(simulation_data$timestep)
simulation_data %>%
filter(winner == "n1") %>%
mean(timestep)
simulation_data %>%
filter(-is.na()) %>%
filter(winner == "n1") %>%
mean(timestep)
View(simulation_data)
simulation_data %>%
filter(winner == "n1") %>%
mean(timestep)
simulation_data %>%
count(winner = "n1")
simulation_data %>%
filter(winner == "n1") %>%
mean(timestep)
simulation_data %>%
filter(winner == "n1") %>%
head()
simulation_data %>%
filter(winner == "n1") %>%
mean()
simulation_data %>%
filter(winner == "n1") %>%
mean(timestep)
simulation_data %>%
filter(winner == "n1") %>%
mean($timestep)
simulation_data %>%
filter(winner == "n1") %>%
mean(x = timestep)
simulation_data %>%
filter(winner == "n1") %>%
mean(timestep)
simulation_data %>%
filter(winner == "n1") %>%
head()
simulation_data %>%
filter(winner == "n1") %>%
mean(timestep, na.rm = TRUE)
mean(simulation_data$timestep)
filter(simulation_data, winner == "n1")
mean(filter(simulation_data, winner == "n1")$timestep)
mean(filter(simulation_data, winner == "n2")$timestep)
mean(filter(simulation_data, winner == "n1")$timestep)
mean(filter(simulation_data, winner == "n1")$timestep)
mean(filter(simulation_data, winner == "n2")$timestep)
seq(1, 0, 0.1)
seq(1, 0, -0.1)
my_params <- list("n1" = list("r" = seq(0, 1, 0.1), "k" = seq(100,600, 100),
"n2" = list("r" = seq(1, 0, -0.1), "k" = seq(600, 100, -100))))
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
my_params <- list("n1" = list("r" = seq(0, 1, 0.1), "k" = seq(100,1000, 100),
"n2" = list("r" = seq(1, 0, -0.1), "k" = seq(600, 1000, -100))))
my_params <- list("n1" = list("r" = seq(0, 1, 0.1), "k" = seq(100,1000, 100),
"n2" = list("r" = seq(1, 0, -0.1), "k" = seq(1000, 100, -100))))
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
simulation_data <- simulate(my_world, my_params)
asdfasdf
asdf
asdf
asdf
asdf
asdf
simulate(my_world, my_params)
warnings()
1/c(1, 2, 3)
min(1, c(1, 3, 2))
c(1, 2, 3) * (1 - min(1, c(2, 3, 4))/c(2, 3, 4))
params[[curr_pop_name]][["k"]]
min(seq(0, 10, 1), 50)
"n2" = list("r" = 0.6, "k" = 300)
my_params <- list("n1" = list("r" = 0.3, "k" = 500,
my_params <- list("n1" = list("r" = 0.3, "k" = 500,
"n2" = list("r" = 0.6, "k" = 300)))
)
ads
my_params <- list("n1" = list("r" = 0.3, "k" = 500,
"n2" = list("r" = 0.6, "k" = 300)))
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
library(tidyverse)
library(ggplot2)
my_world <- list("1" = list("n1" = 10, "n2" = 10),
"2" = list("n1" = 0, "n2" = 0),
"3" = list("n1" = 0, "n2" = 0),
"4" = list("n1" = 0, "n2" = 0),
"5" = list("n1" = 0, "n2" = 0),
"6" = list("n1" = 0, "n2" = 0),
"7" = list("n1" = 0, "n2" = 0),
"8" = list("n1" = 0, "n2" = 0),
"9" = list("n1" = 0, "n2" = 0),
"10" = list("n1" = 0, "n2" = 0),
"11" = list("n1" = 0, "n2" = 0),
"12" = list("n1" = 0, "n2" = 0),
"13" = list("n1" = 0, "n2" = 0),
"14" = list("n1" = 0, "n2" = 0),
"15" = list("n1" = 0, "n2" = 0),
"16" = list("n1" = 0, "n2" = 0),
"17" = list("n1" = 0, "n2" = 0),
"18" = list("n1" = 0, "n2" = 0),
"19" = list("n1" = 0, "n2" = 0),
"20" = list("n1" = 0, "n2" = 0))
my_params <- list("n1" = list("r" = 0.3, "k" = 500,
"n2" = list("r" = 0.6, "k" = 300)))
migrants_number <- function(n){
return(rbinom(n = 1, size = n, prob = 0.5))
}
direction_generator <-function(){
return(sample(c(-1, 1), 1))
}
direction_generator()
growth <- function(r, k, n){
return((r*(1-min(n,k)/k))*min(n,k))
}
growth(r = 10, k = 100, n = 10)
simulate <- function(world, params){ #function definition
i <- 0 #i counter creaion
while(i<1000){ # while loop which stops when i reaches 1000 (there's a i += 1 below)
#growth on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] +
round(growth(r = params[[curr_pop_name]][["r"]], k = params[[curr_pop_name]][["k"]], n = curr_pop)) -> curr_pop# calculating the population at the next timestep, and adding that it to curr_pop
}
}
# so far the logistic growth step of our system's life cycle was applied to every population in every patch
#next we will apply the migration
#movement on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
migrants <- migrants_number(floor(curr_pop))# determining the number of migrants
direction <- direction_generator()# determining which direction the will go
destination <- patch + direction# isolating the destination patch
if(all(destination > 0 & destination <= length(world))){# checking if the destination patch exists
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] - migrants# subtracting the migrants from original patch
world[[destination]][[curr_pop_name]] <- world[[destination]][[curr_pop_name]] + migrants# adding the migrants into new patch
}
}
}
#checking if one of the populations won
if(sum(unlist(world$"20")) > 0){# checking if the final patch has any members in it( = 0 if empty, > 0 otherwise). If it does:
result <- list(world)# save the state of the world, as is into result
edge_patch <- world$"20"# Isolate the final patch so that we can:
#check which one the winner is
the_winner <- character()
ifelse(edge_patch$n1 > 0 && edge_patch$n2 == 0, the_winner <- "n1",
ifelse(edge_patch$n1 == 0 && edge_patch$n2 > 0, the_winner <- "n2", the_winner <- NA))
#put the results in a new row in simulation_data
simulation_data %>% add_row(worlds = result, timestep = i, parameters = list(params),
winner = the_winner,  r1 = params$n1$r,
r2 = params$n2$r, k1 = params$n1$k, k2 = params$n2$k) -> simulation_data
return(simulation_data)
}
i <- i + 1
}
}
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
library(tidyverse)
library(ggplot2)
my_world <- list("1" = list("n1" = 10, "n2" = 10),
"2" = list("n1" = 0, "n2" = 0),
"3" = list("n1" = 0, "n2" = 0),
"4" = list("n1" = 0, "n2" = 0),
"5" = list("n1" = 0, "n2" = 0),
"6" = list("n1" = 0, "n2" = 0),
"7" = list("n1" = 0, "n2" = 0),
"8" = list("n1" = 0, "n2" = 0),
"9" = list("n1" = 0, "n2" = 0),
"10" = list("n1" = 0, "n2" = 0),
"11" = list("n1" = 0, "n2" = 0),
"12" = list("n1" = 0, "n2" = 0),
"13" = list("n1" = 0, "n2" = 0),
"14" = list("n1" = 0, "n2" = 0),
"15" = list("n1" = 0, "n2" = 0),
"16" = list("n1" = 0, "n2" = 0),
"17" = list("n1" = 0, "n2" = 0),
"18" = list("n1" = 0, "n2" = 0),
"19" = list("n1" = 0, "n2" = 0),
"20" = list("n1" = 0, "n2" = 0))
my_params <- list("n1" = list("r" = 0.3, "k" = 500,
"n2" = list("r" = 0.6, "k" = 300)))
migrants_number <- function(n){
return(rbinom(n = 1, size = n, prob = 0.5))
}
direction_generator <-function(){
return(sample(c(-1, 1), 1))
}
direction_generator()
growth <- function(r, k, n){
return((r*(1-min(n,k)/k))*min(n,k))
}
growth(r = 10, k = 100, n = 10)
simulate <- function(world, params){ #function definition
i <- 0 #i counter creaion
while(i<1000){ # while loop which stops when i reaches 1000 (there's a i += 1 below)
#growth on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] +
round(growth(r = params[[curr_pop_name]][["r"]], k = params[[curr_pop_name]][["k"]], n = curr_pop)) -> curr_pop# calculating the population at the next timestep, and adding that it to curr_pop
}
}
# so far the logistic growth step of our system's life cycle was applied to every population in every patch
#next we will apply the migration
#movement on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
migrants <- migrants_number(floor(curr_pop))# determining the number of migrants
direction <- direction_generator()# determining which direction the will go
destination <- patch + direction# isolating the destination patch
if(all(destination > 0 & destination <= length(world))){# checking if the destination patch exists
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] - migrants# subtracting the migrants from original patch
world[[destination]][[curr_pop_name]] <- world[[destination]][[curr_pop_name]] + migrants# adding the migrants into new patch
}
}
}
#checking if one of the populations won
if(sum(unlist(world$"20")) > 0){# checking if the final patch has any members in it( = 0 if empty, > 0 otherwise). If it does:
result <- list(world)# save the state of the world, as is into result
edge_patch <- world$"20"# Isolate the final patch so that we can:
#check which one the winner is
the_winner <- character()
ifelse(edge_patch$n1 > 0 && edge_patch$n2 == 0, the_winner <- "n1",
ifelse(edge_patch$n1 == 0 && edge_patch$n2 > 0, the_winner <- "n2", the_winner <- NA))
#put the results in a new row in simulation_data
simulation_data %>% add_row(worlds = result, timestep = i, parameters = list(params),
winner = the_winner,  r1 = params$n1$r,
r2 = params$n2$r, k1 = params$n1$k, k2 = params$n2$k) -> simulation_data
return(simulation_data)
}
i <- i + 1
}
}
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
View(migrants_number)
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
my_world <- list("1" = list("n1" = 10, "n2" = 10),
"2" = list("n1" = 0, "n2" = 0),
"3" = list("n1" = 0, "n2" = 0),
"4" = list("n1" = 0, "n2" = 0),
"5" = list("n1" = 0, "n2" = 0),
"6" = list("n1" = 0, "n2" = 0),
"7" = list("n1" = 0, "n2" = 0),
"8" = list("n1" = 0, "n2" = 0),
"9" = list("n1" = 0, "n2" = 0),
"10" = list("n1" = 0, "n2" = 0),
"11" = list("n1" = 0, "n2" = 0),
"12" = list("n1" = 0, "n2" = 0),
"13" = list("n1" = 0, "n2" = 0),
"14" = list("n1" = 0, "n2" = 0),
"15" = list("n1" = 0, "n2" = 0),
"16" = list("n1" = 0, "n2" = 0),
"17" = list("n1" = 0, "n2" = 0),
"18" = list("n1" = 0, "n2" = 0),
"19" = list("n1" = 0, "n2" = 0),
"20" = list("n1" = 0, "n2" = 0))
my_params <- list("n1" = list("r" = 0.3, "k" = 500,
"n2" = list("r" = 0.6, "k" = 300)))
View(my_world)
View(my_params)
migrants_number <- function(n){
return(rbinom(n = 1, size = n, prob = 0.5))
}
migrants_number <- function(n){
return(rbinom(n = 1, size = n, prob = 0.5))
}
migrants_number <- function(number){
return(rbinom(n = 1, size = number, prob = 0.5))
}
direction_generator <-function(){
return(sample(c(-1, 1), 1))
}
direction_generator()
migrants_number(10)
growth <- function(r, k, n){
return((r*(1-min(n,k)/k))*min(n,k))
}
growth(r = 10, k = 100, n = 10)
simulate <- function(world, params){ #function definition
i <- 0 #i counter creaion
while(i<1000){ # while loop which stops when i reaches 1000 (there's a i += 1 below)
#growth on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] +
round(growth(r = params[[curr_pop_name]][["r"]], k = params[[curr_pop_name]][["k"]], n = curr_pop)) -> curr_pop# calculating the population at the next timestep, and adding that it to curr_pop
}
}
# so far the logistic growth step of our system's life cycle was applied to every population in every patch
#next we will apply the migration
#movement on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
migrants <- migrants_number(floor(curr_pop))# determining the number of migrants
direction <- direction_generator()# determining which direction the will go
destination <- patch + direction# isolating the destination patch
if(all(destination > 0 & destination <= length(world))){# checking if the destination patch exists
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] - migrants# subtracting the migrants from original patch
world[[destination]][[curr_pop_name]] <- world[[destination]][[curr_pop_name]] + migrants# adding the migrants into new patch
}
}
}
#checking if one of the populations won
if(sum(unlist(world$"20")) > 0){# checking if the final patch has any members in it( = 0 if empty, > 0 otherwise). If it does:
result <- list(world)# save the state of the world, as is into result
edge_patch <- world$"20"# Isolate the final patch so that we can:
#check which one the winner is
the_winner <- character()
ifelse(edge_patch$n1 > 0 && edge_patch$n2 == 0, the_winner <- "n1",
ifelse(edge_patch$n1 == 0 && edge_patch$n2 > 0, the_winner <- "n2", the_winner <- NA))
#put the results in a new row in simulation_data
simulation_data %>% add_row(worlds = result, timestep = i, parameters = list(params),
winner = the_winner,  r1 = params$n1$r,
r2 = params$n2$r, k1 = params$n1$k, k2 = params$n2$k) -> simulation_data
return(simulation_data)
}
i <- i + 1
}
}
simulate <- function(world, params){ #function definition
i <- 0 #i counter creaion
while(i<1000){ # while loop which stops when i reaches 1000 (there's a i += 1 below)
#growth on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] +
round(growth(r = params[[curr_pop_name]][["r"]], k = params[[curr_pop_name]][["k"]], n = curr_pop)) -> curr_pop# calculating the population at the next timestep, and adding that it to curr_pop
}
}
# so far the logistic growth step of our system's life cycle was applied to every population in every patch
#next we will apply the migration
#movement on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
migrants <- migrants_number(floor(curr_pop))# determining the number of migrants
direction <- direction_generator()# determining which direction the will go
destination <- patch + direction# isolating the destination patch
if(all(destination > 0 & destination <= length(world))){# checking if the destination patch exists
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] - migrants# subtracting the migrants from original patch
world[[destination]][[curr_pop_name]] <- world[[destination]][[curr_pop_name]] + migrants# adding the migrants into new patch
}
}
}
#checking if one of the populations won
if(sum(unlist(world$"20")) > 0){# checking if the final patch has any members in it( = 0 if empty, > 0 otherwise). If it does:
result <- list(world)# save the state of the world, as is into result
edge_patch <- world$"20"# Isolate the final patch so that we can:
#check which one the winner is
the_winner <- character()
ifelse(edge_patch$n1 > 0 && edge_patch$n2 == 0, the_winner <- "n1",
ifelse(edge_patch$n1 == 0 && edge_patch$n2 > 0, the_winner <- "n2", the_winner <- NA))
#put the results in a new row in simulation_data
simulation_data %>% add_row(worlds = result, timestep = i, parameters = list(params),
winner = the_winner,  r1 = params$n1$r,
r2 = params$n2$r, k1 = params$n1$k, k2 = params$n2$k) -> simulation_data
return(simulation_data)
}
i <- i + 1
}
}
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
warnings()
growth(r = 10, k = 100, n = 10)
growth(r = 10, k = 1000, n = 10)
my_params <- list("n1" = list("r" = 0.3, "k" = 600,
"n2" = list("r" = 0.6, "k" = 300)))
my_params <- list("n1" = list("r" = 0.3, "k" = 300,
"n2" = list("r" = 0.6, "k" = 300)))
my_params <- list("n1" = list("r" = 0.3, "k" = 300,
"n2" = list("r" = 0.6, "k" = 300)))
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
library(tidyverse)
library(ggplot2)
my_world <- list("1" = list("n1" = 10, "n2" = 10),
"2" = list("n1" = 0, "n2" = 0),
"3" = list("n1" = 0, "n2" = 0),
"4" = list("n1" = 0, "n2" = 0),
"5" = list("n1" = 0, "n2" = 0),
"6" = list("n1" = 0, "n2" = 0),
"7" = list("n1" = 0, "n2" = 0),
"8" = list("n1" = 0, "n2" = 0),
"9" = list("n1" = 0, "n2" = 0),
"10" = list("n1" = 0, "n2" = 0),
"11" = list("n1" = 0, "n2" = 0),
"12" = list("n1" = 0, "n2" = 0),
"13" = list("n1" = 0, "n2" = 0),
"14" = list("n1" = 0, "n2" = 0),
"15" = list("n1" = 0, "n2" = 0),
"16" = list("n1" = 0, "n2" = 0),
"17" = list("n1" = 0, "n2" = 0),
"18" = list("n1" = 0, "n2" = 0),
"19" = list("n1" = 0, "n2" = 0),
"20" = list("n1" = 0, "n2" = 0))
my_params <- list("n1" = list("r" = 0.3, "k" = 300,
"n2" = list("r" = 0.6, "k" = 300)))
migrants_number <- function(number){
return(rbinom(n = 1, size = number, prob = 0.5))
}
direction_generator <-function(){
return(sample(c(-1, 1), 1))
}
direction_generator()
growth <- function(r, k, n){
return((r*(1-min(n,k)/k))*min(n,k))
}
growth(r = 10, k = 1000, n = 10)
simulate <- function(world, params){ #function definition
i <- 0 #i counter creaion
while(i<1000){ # while loop which stops when i reaches 1000 (there's a i += 1 below)
#growth on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] +
round(growth(r = params[[curr_pop_name]][["r"]], k = params[[curr_pop_name]][["k"]], n = curr_pop)) -> curr_pop# calculating the population at the next timestep, and adding that it to curr_pop
}
}
# so far the logistic growth step of our system's life cycle was applied to every population in every patch
#next we will apply the migration
#movement on all patches
for(patch in seq(1, length(world))){
for(pop in seq(1, length(world[[patch]]))){# iterating through each population in each patch
curr_pop_name <- names(world[[patch]][pop])# isolating the iterated population name for easier use
curr_pop <- world[[patch]][[curr_pop_name]]# isolating the iterated population value for easier use
migrants <- migrants_number(floor(curr_pop))# determining the number of migrants
direction <- direction_generator()# determining which direction the will go
destination <- patch + direction# isolating the destination patch
if(all(destination > 0 & destination <= length(world))){# checking if the destination patch exists
world[[patch]][[curr_pop_name]] <- world[[patch]][[curr_pop_name]] - migrants# subtracting the migrants from original patch
world[[destination]][[curr_pop_name]] <- world[[destination]][[curr_pop_name]] + migrants# adding the migrants into new patch
}
}
}
#checking if one of the populations won
if(sum(unlist(world$"20")) > 0){# checking if the final patch has any members in it( = 0 if empty, > 0 otherwise). If it does:
result <- list(world)# save the state of the world, as is into result
edge_patch <- world$"20"# Isolate the final patch so that we can:
#check which one the winner is
the_winner <- character()
ifelse(edge_patch$n1 > 0 && edge_patch$n2 == 0, the_winner <- "n1",
ifelse(edge_patch$n1 == 0 && edge_patch$n2 > 0, the_winner <- "n2", the_winner <- NA))
#put the results in a new row in simulation_data
simulation_data %>% add_row(worlds = result, timestep = i, parameters = list(params),
winner = the_winner,  r1 = params$n1$r,
r2 = params$n2$r, k1 = params$n1$k, k2 = params$n2$k) -> simulation_data
return(simulation_data)
}
i <- i + 1
}
}
#making the dataframe empty
simulation_data <- tibble(worlds = list(), timestep = numeric(), parameters = list(),
winner = character(), r1 = numeric(), r2 = numeric(), k1 = numeric(), k2 = numeric())
for(i in seq(1, 10, 1)){
simulation_data <- simulate(my_world, my_params)
}
